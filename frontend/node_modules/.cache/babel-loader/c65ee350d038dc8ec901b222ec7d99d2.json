{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { newProductReducer, newReviewReducer, productDetailsReducer, productReducer, productReviewsReducer, productsReducer, reviewReducer } from \"./reducers/productReducer\";\nimport { allUsersReducer, forgotPasswordReducer, profileReducer, userDetailsReducer, userReducer } from \"./reducers/userReducer\";\nimport { cartReducer } from \"./reducers/cartReducer\";\nimport { allOrdersReducer, myOrdersReducer, newOrderReducer, orderDetailsReducer, orderReducer } from \"./reducers/orderReducer\";\nconst reducer = combineReducers({\n  products: productsReducer,\n  productDetails: productDetailsReducer,\n  user: userReducer,\n  profile: profileReducer,\n  forgotPassword: forgotPasswordReducer,\n  cart: cartReducer,\n  newOrder: newOrderReducer,\n  myOrders: myOrdersReducer,\n  orderDetails: orderDetailsReducer,\n  newReview: newReviewReducer,\n  newProduct: newProductReducer,\n  product: productReducer,\n  allOrders: allOrdersReducer,\n  order: orderReducer,\n  allUsers: allUsersReducer,\n  userDetails: userDetailsReducer,\n  productReviews: productReviewsReducer,\n  review: reviewReducer\n});\nlet initialState = {\n  cart: {\n    cartItems: localStorage.getItem(\"cartItems\") ? JSON.parse(localStorage.getItem(\"cartItems\")) : [],\n    shippingInfo: localStorage.getItem(\"shippingInfo\") ? JSON.parse(localStorage.getItem(\"shippingInfo\")) : {}\n  }\n};\nconst middleware = [thunk];\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\nexport default store;","map":{"version":3,"sources":["/home/users/svasanth/Desktop/multi1/MERN Ecom/frontend/src/store.js"],"names":["createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","newProductReducer","newReviewReducer","productDetailsReducer","productReducer","productReviewsReducer","productsReducer","reviewReducer","allUsersReducer","forgotPasswordReducer","profileReducer","userDetailsReducer","userReducer","cartReducer","allOrdersReducer","myOrdersReducer","newOrderReducer","orderDetailsReducer","orderReducer","reducer","products","productDetails","user","profile","forgotPassword","cart","newOrder","myOrders","orderDetails","newReview","newProduct","product","allOrders","order","allUsers","userDetails","productReviews","review","initialState","cartItems","localStorage","getItem","JSON","parse","shippingInfo","middleware","store"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SACEC,iBADF,EAEEC,gBAFF,EAGEC,qBAHF,EAIEC,cAJF,EAKEC,qBALF,EAMEC,eANF,EAOEC,aAPF,QAQO,2BARP;AAUA,SACEC,eADF,EAEEC,qBAFF,EAGEC,cAHF,EAIEC,kBAJF,EAKEC,WALF,QAMO,wBANP;AAQA,SAASC,WAAT,QAA4B,wBAA5B;AACA,SACEC,gBADF,EAEEC,eAFF,EAGEC,eAHF,EAIEC,mBAJF,EAKEC,YALF,QAMO,yBANP;AAQA,MAAMC,OAAO,GAAGtB,eAAe,CAAC;AAC9BuB,EAAAA,QAAQ,EAAEd,eADoB;AAE9Be,EAAAA,cAAc,EAAElB,qBAFc;AAG9BmB,EAAAA,IAAI,EAAEV,WAHwB;AAI9BW,EAAAA,OAAO,EAAEb,cAJqB;AAK9Bc,EAAAA,cAAc,EAAEf,qBALc;AAM9BgB,EAAAA,IAAI,EAAEZ,WANwB;AAO9Ba,EAAAA,QAAQ,EAAEV,eAPoB;AAQ9BW,EAAAA,QAAQ,EAAEZ,eARoB;AAS9Ba,EAAAA,YAAY,EAAEX,mBATgB;AAU9BY,EAAAA,SAAS,EAAE3B,gBAVmB;AAW9B4B,EAAAA,UAAU,EAAE7B,iBAXkB;AAY9B8B,EAAAA,OAAO,EAAE3B,cAZqB;AAa9B4B,EAAAA,SAAS,EAAElB,gBAbmB;AAc9BmB,EAAAA,KAAK,EAAEf,YAduB;AAe9BgB,EAAAA,QAAQ,EAAE1B,eAfoB;AAgB9B2B,EAAAA,WAAW,EAAExB,kBAhBiB;AAiB9ByB,EAAAA,cAAc,EAAE/B,qBAjBc;AAkB9BgC,EAAAA,MAAM,EAAE9B;AAlBsB,CAAD,CAA/B;AAqBA,IAAI+B,YAAY,GAAG;AACjBb,EAAAA,IAAI,EAAE;AACJc,IAAAA,SAAS,EAAEC,YAAY,CAACC,OAAb,CAAqB,WAArB,IACPC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CADO,GAEP,EAHA;AAIJG,IAAAA,YAAY,EAAEJ,YAAY,CAACC,OAAb,CAAqB,cAArB,IACVC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,cAArB,CAAX,CADU,GAEV;AANA;AADW,CAAnB;AAWA,MAAMI,UAAU,GAAG,CAAC9C,KAAD,CAAnB;AAEA,MAAM+C,KAAK,GAAGlD,WAAW,CACvBuB,OADuB,EAEvBmB,YAFuB,EAGvBtC,mBAAmB,CAACF,eAAe,CAAC,GAAG+C,UAAJ,CAAhB,CAHI,CAAzB;AAMA,eAAeC,KAAf","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport {\n  newProductReducer,\n  newReviewReducer,\n  productDetailsReducer,\n  productReducer,\n  productReviewsReducer,\n  productsReducer,\n  reviewReducer,\n} from \"./reducers/productReducer\";\n\nimport {\n  allUsersReducer,\n  forgotPasswordReducer,\n  profileReducer,\n  userDetailsReducer,\n  userReducer,\n} from \"./reducers/userReducer\";\n\nimport { cartReducer } from \"./reducers/cartReducer\";\nimport {\n  allOrdersReducer,\n  myOrdersReducer,\n  newOrderReducer,\n  orderDetailsReducer,\n  orderReducer,\n} from \"./reducers/orderReducer\";\n\nconst reducer = combineReducers({\n  products: productsReducer,\n  productDetails: productDetailsReducer,\n  user: userReducer,\n  profile: profileReducer,\n  forgotPassword: forgotPasswordReducer,\n  cart: cartReducer,\n  newOrder: newOrderReducer,\n  myOrders: myOrdersReducer,\n  orderDetails: orderDetailsReducer,\n  newReview: newReviewReducer,\n  newProduct: newProductReducer,\n  product: productReducer,\n  allOrders: allOrdersReducer,\n  order: orderReducer,\n  allUsers: allUsersReducer,\n  userDetails: userDetailsReducer,\n  productReviews: productReviewsReducer,\n  review: reviewReducer,\n});\n\nlet initialState = {\n  cart: {\n    cartItems: localStorage.getItem(\"cartItems\")\n      ? JSON.parse(localStorage.getItem(\"cartItems\"))\n      : [],\n    shippingInfo: localStorage.getItem(\"shippingInfo\")\n      ? JSON.parse(localStorage.getItem(\"shippingInfo\"))\n      : {},\n  },\n};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n  reducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(...middleware))\n);\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}