{"ast":null,"code":"import { LOGIN_REQUEST, LOGIN_FAIL, LOGIN_SUCCESS, REGISTER_USER_REQUEST, REGISTER_USER_SUCCESS, REGISTER_USER_FAIL, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAIL, LOGOUT_SUCCESS, LOGOUT_FAIL, UPDATE_PROFILE_REQUEST, UPDATE_PROFILE_SUCCESS, UPDATE_PROFILE_FAIL, UPDATE_PASSWORD_REQUEST, UPDATE_PASSWORD_SUCCESS, UPDATE_PASSWORD_FAIL, FORGOT_PASSWORD_REQUEST, FORGOT_PASSWORD_SUCCESS, FORGOT_PASSWORD_FAIL, RESET_PASSWORD_REQUEST, RESET_PASSWORD_SUCCESS, RESET_PASSWORD_FAIL, ALL_USERS_REQUEST, ALL_USERS_SUCCESS, ALL_USERS_FAIL, DELETE_USER_REQUEST, DELETE_USER_SUCCESS, DELETE_USER_FAIL, UPDATE_USER_REQUEST, UPDATE_USER_SUCCESS, UPDATE_USER_FAIL, USER_DETAILS_REQUEST, USER_DETAILS_SUCCESS, USER_DETAILS_FAIL, CLEAR_ERRORS } from \"../constants/userConstants\";\nimport axios from \"axios\"; // Login\n\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: LOGIN_REQUEST\n    });\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const {\n      data\n    } = await axios.post(`/api/v1/login`, {\n      email,\n      password\n    }, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: data.user\n    });\n  } catch (error) {\n    dispatch({\n      type: LOGIN_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Register\n\nexport const register = userData => async dispatch => {\n  try {\n    dispatch({\n      type: REGISTER_USER_REQUEST\n    });\n    const config = {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    };\n    const {\n      data\n    } = await axios.post(`/api/v1/register`, userData, config);\n    dispatch({\n      type: REGISTER_USER_SUCCESS,\n      payload: data.user\n    });\n  } catch (error) {\n    dispatch({\n      type: REGISTER_USER_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Load User\n\nexport const loadUser = () => async dispatch => {\n  try {\n    dispatch({\n      type: LOAD_USER_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`/api/v1/me`);\n    dispatch({\n      type: LOAD_USER_SUCCESS,\n      payload: data.user\n    });\n  } catch (error) {\n    dispatch({\n      type: LOAD_USER_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Logout User\n\nexport const logout = () => async dispatch => {\n  try {\n    await axios.get(`/api/v1/logout`);\n    dispatch({\n      type: LOGOUT_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: LOGOUT_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Update Profile\n\nexport const updateProfile = userData => async dispatch => {\n  try {\n    dispatch({\n      type: UPDATE_PROFILE_REQUEST\n    });\n    const config = {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/v1/me/update`, userData, config);\n    dispatch({\n      type: UPDATE_PROFILE_SUCCESS,\n      payload: data.success\n    });\n  } catch (error) {\n    dispatch({\n      type: UPDATE_PROFILE_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Update Password\n\nexport const updatePassword = passwords => async dispatch => {\n  try {\n    dispatch({\n      type: UPDATE_PASSWORD_REQUEST\n    });\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/v1/password/update`, passwords, config);\n    dispatch({\n      type: UPDATE_PASSWORD_SUCCESS,\n      payload: data.success\n    });\n  } catch (error) {\n    dispatch({\n      type: UPDATE_PASSWORD_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Forgot Password\n\nexport const forgotPassword = email => async dispatch => {\n  try {\n    dispatch({\n      type: FORGOT_PASSWORD_REQUEST\n    });\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const {\n      data\n    } = await axios.post(`/api/v1/password/forgot`, email, config);\n    dispatch({\n      type: FORGOT_PASSWORD_SUCCESS,\n      payload: data.message\n    });\n  } catch (error) {\n    dispatch({\n      type: FORGOT_PASSWORD_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Reset Password\n\nexport const resetPassword = (token, passwords) => async dispatch => {\n  try {\n    dispatch({\n      type: RESET_PASSWORD_REQUEST\n    });\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/v1/password/reset/${token}`, passwords, config);\n    dispatch({\n      type: RESET_PASSWORD_SUCCESS,\n      payload: data.success\n    });\n  } catch (error) {\n    dispatch({\n      type: RESET_PASSWORD_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // get All Users\n\nexport const getAllUsers = () => async dispatch => {\n  try {\n    dispatch({\n      type: ALL_USERS_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`/api/v1/admin/users`);\n    dispatch({\n      type: ALL_USERS_SUCCESS,\n      payload: data.users\n    });\n  } catch (error) {\n    dispatch({\n      type: ALL_USERS_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // get  User Details\n\nexport const getUserDetails = id => async dispatch => {\n  try {\n    dispatch({\n      type: USER_DETAILS_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`/api/v1/admin/user/${id}`);\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data.user\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_DETAILS_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Update User\n\nexport const updateUser = (id, userData) => async dispatch => {\n  try {\n    dispatch({\n      type: UPDATE_USER_REQUEST\n    });\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/v1/admin/user/${id}`, userData, config);\n    dispatch({\n      type: UPDATE_USER_SUCCESS,\n      payload: data.success\n    });\n  } catch (error) {\n    dispatch({\n      type: UPDATE_USER_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Delete User\n\nexport const deleteUser = id => async dispatch => {\n  try {\n    dispatch({\n      type: DELETE_USER_REQUEST\n    });\n    const {\n      data\n    } = await axios.delete(`/api/v1/admin/user/${id}`);\n    dispatch({\n      type: DELETE_USER_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: DELETE_USER_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Clearing Errors\n\nexport const clearErrors = () => async dispatch => {\n  dispatch({\n    type: CLEAR_ERRORS\n  });\n};","map":{"version":3,"sources":["/home/users/svasanth/Desktop/multi1/MERN Ecom/frontend/src/actions/userAction.js"],"names":["LOGIN_REQUEST","LOGIN_FAIL","LOGIN_SUCCESS","REGISTER_USER_REQUEST","REGISTER_USER_SUCCESS","REGISTER_USER_FAIL","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAIL","LOGOUT_SUCCESS","LOGOUT_FAIL","UPDATE_PROFILE_REQUEST","UPDATE_PROFILE_SUCCESS","UPDATE_PROFILE_FAIL","UPDATE_PASSWORD_REQUEST","UPDATE_PASSWORD_SUCCESS","UPDATE_PASSWORD_FAIL","FORGOT_PASSWORD_REQUEST","FORGOT_PASSWORD_SUCCESS","FORGOT_PASSWORD_FAIL","RESET_PASSWORD_REQUEST","RESET_PASSWORD_SUCCESS","RESET_PASSWORD_FAIL","ALL_USERS_REQUEST","ALL_USERS_SUCCESS","ALL_USERS_FAIL","DELETE_USER_REQUEST","DELETE_USER_SUCCESS","DELETE_USER_FAIL","UPDATE_USER_REQUEST","UPDATE_USER_SUCCESS","UPDATE_USER_FAIL","USER_DETAILS_REQUEST","USER_DETAILS_SUCCESS","USER_DETAILS_FAIL","CLEAR_ERRORS","axios","login","email","password","dispatch","type","config","headers","data","post","payload","user","error","response","message","register","userData","loadUser","get","logout","updateProfile","put","success","updatePassword","passwords","forgotPassword","resetPassword","token","getAllUsers","users","getUserDetails","id","updateUser","deleteUser","delete","clearErrors"],"mappings":"AAAA,SACEA,aADF,EAEEC,UAFF,EAGEC,aAHF,EAIEC,qBAJF,EAKEC,qBALF,EAMEC,kBANF,EAOEC,iBAPF,EAQEC,iBARF,EASEC,cATF,EAUEC,cAVF,EAWEC,WAXF,EAYEC,sBAZF,EAaEC,sBAbF,EAcEC,mBAdF,EAeEC,uBAfF,EAgBEC,uBAhBF,EAiBEC,oBAjBF,EAkBEC,uBAlBF,EAmBEC,uBAnBF,EAoBEC,oBApBF,EAqBEC,sBArBF,EAsBEC,sBAtBF,EAuBEC,mBAvBF,EAwBEC,iBAxBF,EAyBEC,iBAzBF,EA0BEC,cA1BF,EA2BEC,mBA3BF,EA4BEC,mBA5BF,EA6BEC,gBA7BF,EA8BEC,mBA9BF,EA+BEC,mBA/BF,EAgCEC,gBAhCF,EAiCEC,oBAjCF,EAkCEC,oBAlCF,EAmCEC,iBAnCF,EAoCEC,YApCF,QAqCO,4BArCP;AAsCA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,OAAO,MAAMC,KAAK,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB,MAAOC,QAAP,IAAoB;AAC5D,MAAI;AACFA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEzC;AAAR,KAAD,CAAR;AAEA,UAAM0C,MAAM,GAAG;AAAEC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB;AAAX,KAAf;AAEA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMR,KAAK,CAACS,IAAN,CACpB,eADoB,EAErB;AAAEP,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAFqB,EAGrBG,MAHqB,CAAvB;AAMAF,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEvC,aAAR;AAAuB4C,MAAAA,OAAO,EAAEF,IAAI,CAACG;AAArC,KAAD,CAAR;AACD,GAZD,CAYE,OAAOC,KAAP,EAAc;AACdR,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAExC,UAAR;AAAoB6C,MAAAA,OAAO,EAAEE,KAAK,CAACC,QAAN,CAAeL,IAAf,CAAoBM;AAAjD,KAAD,CAAR;AACD;AACF,CAhBM,C,CAkBP;;AACA,OAAO,MAAMC,QAAQ,GAAIC,QAAD,IAAc,MAAOZ,QAAP,IAAoB;AACxD,MAAI;AACFA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEtC;AAAR,KAAD,CAAR;AAEA,UAAMuC,MAAM,GAAG;AAAEC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB;AAAX,KAAf;AAEA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMR,KAAK,CAACS,IAAN,CAAY,kBAAZ,EAA+BO,QAA/B,EAAyCV,MAAzC,CAAvB;AAEAF,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAErC,qBAAR;AAA+B0C,MAAAA,OAAO,EAAEF,IAAI,CAACG;AAA7C,KAAD,CAAR;AACD,GARD,CAQE,OAAOC,KAAP,EAAc;AACdR,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEpC,kBADC;AAEPyC,MAAAA,OAAO,EAAEE,KAAK,CAACC,QAAN,CAAeL,IAAf,CAAoBM;AAFtB,KAAD,CAAR;AAID;AACF,CAfM,C,CAiBP;;AACA,OAAO,MAAMG,QAAQ,GAAG,MAAM,MAAOb,QAAP,IAAoB;AAChD,MAAI;AACFA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEnC;AAAR,KAAD,CAAR;AAEA,UAAM;AAAEsC,MAAAA;AAAF,QAAW,MAAMR,KAAK,CAACkB,GAAN,CAAW,YAAX,CAAvB;AAEAd,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAElC,iBAAR;AAA2BuC,MAAAA,OAAO,EAAEF,IAAI,CAACG;AAAzC,KAAD,CAAR;AACD,GAND,CAME,OAAOC,KAAP,EAAc;AACdR,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEjC,cAAR;AAAwBsC,MAAAA,OAAO,EAAEE,KAAK,CAACC,QAAN,CAAeL,IAAf,CAAoBM;AAArD,KAAD,CAAR;AACD;AACF,CAVM,C,CAYP;;AACA,OAAO,MAAMK,MAAM,GAAG,MAAM,MAAOf,QAAP,IAAoB;AAC9C,MAAI;AACF,UAAMJ,KAAK,CAACkB,GAAN,CAAW,gBAAX,CAAN;AAEAd,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEhC;AAAR,KAAD,CAAR;AACD,GAJD,CAIE,OAAOuC,KAAP,EAAc;AACdR,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE/B,WAAR;AAAqBoC,MAAAA,OAAO,EAAEE,KAAK,CAACC,QAAN,CAAeL,IAAf,CAAoBM;AAAlD,KAAD,CAAR;AACD;AACF,CARM,C,CAUP;;AACA,OAAO,MAAMM,aAAa,GAAIJ,QAAD,IAAc,MAAOZ,QAAP,IAAoB;AAC7D,MAAI;AACFA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE9B;AAAR,KAAD,CAAR;AAEA,UAAM+B,MAAM,GAAG;AAAEC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB;AAAX,KAAf;AAEA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMR,KAAK,CAACqB,GAAN,CAAW,mBAAX,EAA+BL,QAA/B,EAAyCV,MAAzC,CAAvB;AAEAF,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE7B,sBAAR;AAAgCkC,MAAAA,OAAO,EAAEF,IAAI,CAACc;AAA9C,KAAD,CAAR;AACD,GARD,CAQE,OAAOV,KAAP,EAAc;AACdR,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAE5B,mBADC;AAEPiC,MAAAA,OAAO,EAAEE,KAAK,CAACC,QAAN,CAAeL,IAAf,CAAoBM;AAFtB,KAAD,CAAR;AAID;AACF,CAfM,C,CAiBP;;AACA,OAAO,MAAMS,cAAc,GAAIC,SAAD,IAAe,MAAOpB,QAAP,IAAoB;AAC/D,MAAI;AACFA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE3B;AAAR,KAAD,CAAR;AAEA,UAAM4B,MAAM,GAAG;AAAEC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB;AAAX,KAAf;AAEA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMR,KAAK,CAACqB,GAAN,CACpB,yBADoB,EAErBG,SAFqB,EAGrBlB,MAHqB,CAAvB;AAMAF,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE1B,uBAAR;AAAiC+B,MAAAA,OAAO,EAAEF,IAAI,CAACc;AAA/C,KAAD,CAAR;AACD,GAZD,CAYE,OAAOV,KAAP,EAAc;AACdR,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEzB,oBADC;AAEP8B,MAAAA,OAAO,EAAEE,KAAK,CAACC,QAAN,CAAeL,IAAf,CAAoBM;AAFtB,KAAD,CAAR;AAID;AACF,CAnBM,C,CAqBP;;AACA,OAAO,MAAMW,cAAc,GAAIvB,KAAD,IAAW,MAAOE,QAAP,IAAoB;AAC3D,MAAI;AACFA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAExB;AAAR,KAAD,CAAR;AAEA,UAAMyB,MAAM,GAAG;AAAEC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB;AAAX,KAAf;AAEA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMR,KAAK,CAACS,IAAN,CAAY,yBAAZ,EAAsCP,KAAtC,EAA6CI,MAA7C,CAAvB;AAEAF,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEvB,uBAAR;AAAiC4B,MAAAA,OAAO,EAAEF,IAAI,CAACM;AAA/C,KAAD,CAAR;AACD,GARD,CAQE,OAAOF,KAAP,EAAc;AACdR,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEtB,oBADC;AAEP2B,MAAAA,OAAO,EAAEE,KAAK,CAACC,QAAN,CAAeL,IAAf,CAAoBM;AAFtB,KAAD,CAAR;AAID;AACF,CAfM,C,CAiBP;;AACA,OAAO,MAAMY,aAAa,GAAG,CAACC,KAAD,EAAQH,SAAR,KAAsB,MAAOpB,QAAP,IAAoB;AACrE,MAAI;AACFA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAErB;AAAR,KAAD,CAAR;AAEA,UAAMsB,MAAM,GAAG;AAAEC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB;AAAX,KAAf;AAEA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMR,KAAK,CAACqB,GAAN,CACpB,0BAAyBM,KAAM,EADX,EAErBH,SAFqB,EAGrBlB,MAHqB,CAAvB;AAMAF,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEpB,sBAAR;AAAgCyB,MAAAA,OAAO,EAAEF,IAAI,CAACc;AAA9C,KAAD,CAAR;AACD,GAZD,CAYE,OAAOV,KAAP,EAAc;AACdR,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEnB,mBADC;AAEPwB,MAAAA,OAAO,EAAEE,KAAK,CAACC,QAAN,CAAeL,IAAf,CAAoBM;AAFtB,KAAD,CAAR;AAID;AACF,CAnBM,C,CAqBP;;AACA,OAAO,MAAMc,WAAW,GAAG,MAAM,MAAOxB,QAAP,IAAoB;AACnD,MAAI;AACFA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAElB;AAAR,KAAD,CAAR;AACA,UAAM;AAAEqB,MAAAA;AAAF,QAAW,MAAMR,KAAK,CAACkB,GAAN,CAAW,qBAAX,CAAvB;AAEAd,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEjB,iBAAR;AAA2BsB,MAAAA,OAAO,EAAEF,IAAI,CAACqB;AAAzC,KAAD,CAAR;AACD,GALD,CAKE,OAAOjB,KAAP,EAAc;AACdR,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEhB,cAAR;AAAwBqB,MAAAA,OAAO,EAAEE,KAAK,CAACC,QAAN,CAAeL,IAAf,CAAoBM;AAArD,KAAD,CAAR;AACD;AACF,CATM,C,CAWP;;AACA,OAAO,MAAMgB,cAAc,GAAIC,EAAD,IAAQ,MAAO3B,QAAP,IAAoB;AACxD,MAAI;AACFA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAET;AAAR,KAAD,CAAR;AACA,UAAM;AAAEY,MAAAA;AAAF,QAAW,MAAMR,KAAK,CAACkB,GAAN,CAAW,sBAAqBa,EAAG,EAAnC,CAAvB;AAEA3B,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAER,oBAAR;AAA8Ba,MAAAA,OAAO,EAAEF,IAAI,CAACG;AAA5C,KAAD,CAAR;AACD,GALD,CAKE,OAAOC,KAAP,EAAc;AACdR,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEP,iBAAR;AAA2BY,MAAAA,OAAO,EAAEE,KAAK,CAACC,QAAN,CAAeL,IAAf,CAAoBM;AAAxD,KAAD,CAAR;AACD;AACF,CATM,C,CAWP;;AACA,OAAO,MAAMkB,UAAU,GAAG,CAACD,EAAD,EAAKf,QAAL,KAAkB,MAAOZ,QAAP,IAAoB;AAC9D,MAAI;AACFA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEZ;AAAR,KAAD,CAAR;AAEA,UAAMa,MAAM,GAAG;AAAEC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB;AAAX,KAAf;AAEA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMR,KAAK,CAACqB,GAAN,CACpB,sBAAqBU,EAAG,EADJ,EAErBf,QAFqB,EAGrBV,MAHqB,CAAvB;AAMAF,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEX,mBAAR;AAA6BgB,MAAAA,OAAO,EAAEF,IAAI,CAACc;AAA3C,KAAD,CAAR;AACD,GAZD,CAYE,OAAOV,KAAP,EAAc;AACdR,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEV,gBADC;AAEPe,MAAAA,OAAO,EAAEE,KAAK,CAACC,QAAN,CAAeL,IAAf,CAAoBM;AAFtB,KAAD,CAAR;AAID;AACF,CAnBM,C,CAqBP;;AACA,OAAO,MAAMmB,UAAU,GAAIF,EAAD,IAAQ,MAAO3B,QAAP,IAAoB;AACpD,MAAI;AACFA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEf;AAAR,KAAD,CAAR;AAEA,UAAM;AAAEkB,MAAAA;AAAF,QAAW,MAAMR,KAAK,CAACkC,MAAN,CAAc,sBAAqBH,EAAG,EAAtC,CAAvB;AAEA3B,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEd,mBAAR;AAA6BmB,MAAAA,OAAO,EAAEF;AAAtC,KAAD,CAAR;AACD,GAND,CAME,OAAOI,KAAP,EAAc;AACdR,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEb,gBADC;AAEPkB,MAAAA,OAAO,EAAEE,KAAK,CAACC,QAAN,CAAeL,IAAf,CAAoBM;AAFtB,KAAD,CAAR;AAID;AACF,CAbM,C,CAeP;;AACA,OAAO,MAAMqB,WAAW,GAAG,MAAM,MAAO/B,QAAP,IAAoB;AACnDA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEN;AAAR,GAAD,CAAR;AACD,CAFM","sourcesContent":["import {\n  LOGIN_REQUEST,\n  LOGIN_FAIL,\n  LOGIN_SUCCESS,\n  REGISTER_USER_REQUEST,\n  REGISTER_USER_SUCCESS,\n  REGISTER_USER_FAIL,\n  LOAD_USER_REQUEST,\n  LOAD_USER_SUCCESS,\n  LOAD_USER_FAIL,\n  LOGOUT_SUCCESS,\n  LOGOUT_FAIL,\n  UPDATE_PROFILE_REQUEST,\n  UPDATE_PROFILE_SUCCESS,\n  UPDATE_PROFILE_FAIL,\n  UPDATE_PASSWORD_REQUEST,\n  UPDATE_PASSWORD_SUCCESS,\n  UPDATE_PASSWORD_FAIL,\n  FORGOT_PASSWORD_REQUEST,\n  FORGOT_PASSWORD_SUCCESS,\n  FORGOT_PASSWORD_FAIL,\n  RESET_PASSWORD_REQUEST,\n  RESET_PASSWORD_SUCCESS,\n  RESET_PASSWORD_FAIL,\n  ALL_USERS_REQUEST,\n  ALL_USERS_SUCCESS,\n  ALL_USERS_FAIL,\n  DELETE_USER_REQUEST,\n  DELETE_USER_SUCCESS,\n  DELETE_USER_FAIL,\n  UPDATE_USER_REQUEST,\n  UPDATE_USER_SUCCESS,\n  UPDATE_USER_FAIL,\n  USER_DETAILS_REQUEST,\n  USER_DETAILS_SUCCESS,\n  USER_DETAILS_FAIL,\n  CLEAR_ERRORS,\n} from \"../constants/userConstants\";\nimport axios from \"axios\";\n\n// Login\nexport const login = (email, password) => async (dispatch) => {\n  try {\n    dispatch({ type: LOGIN_REQUEST });\n\n    const config = { headers: { \"Content-Type\": \"application/json\" } };\n\n    const { data } = await axios.post(\n      `/api/v1/login`,\n      { email, password },\n      config\n    );\n\n    dispatch({ type: LOGIN_SUCCESS, payload: data.user });\n  } catch (error) {\n    dispatch({ type: LOGIN_FAIL, payload: error.response.data.message });\n  }\n};\n\n// Register\nexport const register = (userData) => async (dispatch) => {\n  try {\n    dispatch({ type: REGISTER_USER_REQUEST });\n\n    const config = { headers: { \"Content-Type\": \"multipart/form-data\" } };\n\n    const { data } = await axios.post(`/api/v1/register`, userData, config);\n\n    dispatch({ type: REGISTER_USER_SUCCESS, payload: data.user });\n  } catch (error) {\n    dispatch({\n      type: REGISTER_USER_FAIL,\n      payload: error.response.data.message,\n    });\n  }\n};\n\n// Load User\nexport const loadUser = () => async (dispatch) => {\n  try {\n    dispatch({ type: LOAD_USER_REQUEST });\n\n    const { data } = await axios.get(`/api/v1/me`);\n\n    dispatch({ type: LOAD_USER_SUCCESS, payload: data.user });\n  } catch (error) {\n    dispatch({ type: LOAD_USER_FAIL, payload: error.response.data.message });\n  }\n};\n\n// Logout User\nexport const logout = () => async (dispatch) => {\n  try {\n    await axios.get(`/api/v1/logout`);\n\n    dispatch({ type: LOGOUT_SUCCESS });\n  } catch (error) {\n    dispatch({ type: LOGOUT_FAIL, payload: error.response.data.message });\n  }\n};\n\n// Update Profile\nexport const updateProfile = (userData) => async (dispatch) => {\n  try {\n    dispatch({ type: UPDATE_PROFILE_REQUEST });\n\n    const config = { headers: { \"Content-Type\": \"multipart/form-data\" } };\n\n    const { data } = await axios.put(`/api/v1/me/update`, userData, config);\n\n    dispatch({ type: UPDATE_PROFILE_SUCCESS, payload: data.success });\n  } catch (error) {\n    dispatch({\n      type: UPDATE_PROFILE_FAIL,\n      payload: error.response.data.message,\n    });\n  }\n};\n\n// Update Password\nexport const updatePassword = (passwords) => async (dispatch) => {\n  try {\n    dispatch({ type: UPDATE_PASSWORD_REQUEST });\n\n    const config = { headers: { \"Content-Type\": \"application/json\" } };\n\n    const { data } = await axios.put(\n      `/api/v1/password/update`,\n      passwords,\n      config\n    );\n\n    dispatch({ type: UPDATE_PASSWORD_SUCCESS, payload: data.success });\n  } catch (error) {\n    dispatch({\n      type: UPDATE_PASSWORD_FAIL,\n      payload: error.response.data.message,\n    });\n  }\n};\n\n// Forgot Password\nexport const forgotPassword = (email) => async (dispatch) => {\n  try {\n    dispatch({ type: FORGOT_PASSWORD_REQUEST });\n\n    const config = { headers: { \"Content-Type\": \"application/json\" } };\n\n    const { data } = await axios.post(`/api/v1/password/forgot`, email, config);\n\n    dispatch({ type: FORGOT_PASSWORD_SUCCESS, payload: data.message });\n  } catch (error) {\n    dispatch({\n      type: FORGOT_PASSWORD_FAIL,\n      payload: error.response.data.message,\n    });\n  }\n};\n\n// Reset Password\nexport const resetPassword = (token, passwords) => async (dispatch) => {\n  try {\n    dispatch({ type: RESET_PASSWORD_REQUEST });\n\n    const config = { headers: { \"Content-Type\": \"application/json\" } };\n\n    const { data } = await axios.put(\n      `/api/v1/password/reset/${token}`,\n      passwords,\n      config\n    );\n\n    dispatch({ type: RESET_PASSWORD_SUCCESS, payload: data.success });\n  } catch (error) {\n    dispatch({\n      type: RESET_PASSWORD_FAIL,\n      payload: error.response.data.message,\n    });\n  }\n};\n\n// get All Users\nexport const getAllUsers = () => async (dispatch) => {\n  try {\n    dispatch({ type: ALL_USERS_REQUEST });\n    const { data } = await axios.get(`/api/v1/admin/users`);\n\n    dispatch({ type: ALL_USERS_SUCCESS, payload: data.users });\n  } catch (error) {\n    dispatch({ type: ALL_USERS_FAIL, payload: error.response.data.message });\n  }\n};\n\n// get  User Details\nexport const getUserDetails = (id) => async (dispatch) => {\n  try {\n    dispatch({ type: USER_DETAILS_REQUEST });\n    const { data } = await axios.get(`/api/v1/admin/user/${id}`);\n\n    dispatch({ type: USER_DETAILS_SUCCESS, payload: data.user });\n  } catch (error) {\n    dispatch({ type: USER_DETAILS_FAIL, payload: error.response.data.message });\n  }\n};\n\n// Update User\nexport const updateUser = (id, userData) => async (dispatch) => {\n  try {\n    dispatch({ type: UPDATE_USER_REQUEST });\n\n    const config = { headers: { \"Content-Type\": \"application/json\" } };\n\n    const { data } = await axios.put(\n      `/api/v1/admin/user/${id}`,\n      userData,\n      config\n    );\n\n    dispatch({ type: UPDATE_USER_SUCCESS, payload: data.success });\n  } catch (error) {\n    dispatch({\n      type: UPDATE_USER_FAIL,\n      payload: error.response.data.message,\n    });\n  }\n};\n\n// Delete User\nexport const deleteUser = (id) => async (dispatch) => {\n  try {\n    dispatch({ type: DELETE_USER_REQUEST });\n\n    const { data } = await axios.delete(`/api/v1/admin/user/${id}`);\n\n    dispatch({ type: DELETE_USER_SUCCESS, payload: data });\n  } catch (error) {\n    dispatch({\n      type: DELETE_USER_FAIL,\n      payload: error.response.data.message,\n    });\n  }\n};\n\n// Clearing Errors\nexport const clearErrors = () => async (dispatch) => {\n  dispatch({ type: CLEAR_ERRORS });\n};\n"]},"metadata":{},"sourceType":"module"}